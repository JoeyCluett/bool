NAME cla-lookahead-unit

INPUTSTART 
    BIT Cin 
    BIT g0 BIT p0
    BIT g1 BIT p1
    BIT g2 BIT p2
    BIT g3 BIT p3
INPUTEND

OUTPUTSTART
    BIT c1
    BIT c2
    BIT c3
    BIT Cout
OUTPUTEND

LOGICSTART

    #! carry generation equations for a carry lookahead adder !#

    INFIX c1   <= g0 + ( p0 * Cin ) END
    INFIX c2   <= g1 + ( p1 * g0 ) + ( p1 * p0 * Cin ) END
    INFIX c3   <= ( g2 + ( p2 * g1 ) ) + ( ( p2 * p1 * g0 ) + ( ( p2 * p1 ) * ( p0 * Cin ) ) ) END
    INFIX Cout <= 
            ( g3 ) + 
            ( p3 * g2 ) + 
            ( p3 * p2 * g1 ) + 
            ( p3 * p2 * p1 * g0 ) + 
            ( p3 * p2 * p1 * p0 * Cin ) END

    #!

        When i get around to implementing a smarter tokenizer...

            INFIX c1   <= g0+(p0*Cin) END
            INFIX c2   <= g1+(p1*g0)+(p1*p0*Cin) END
            INFIX c3   <= (g2+(p2*g1))+((p2*p1*g0)+((p2*p1)*(p0*Cin))) END
            INFIX Cout <= (g3+(p3*g2))+((p3*p2*g1)+((p3*p2)*(p1*g0)))+((p3*p2)*(p1*p0)*Cin) END

    !#

    #!
        NOTE: the logic generator does not any attempt 
        to optimize the logical expressions given to 
        it. They are evaluated and implemented AS IS. If
        you wish to have more optimized performance, you 
        must include parentheses as required for your 
        application

        As all logical operators have the same precedence, 
        consecutive logical operations will each add one 
        gate delay. For example, 'a * b + c ^ d' is 
        equivalent to  ((( a * b ) + c) ^ d)
    !#

LOGICEND